# Velvet Python - Project Configuration
# ======================================
# Modern Python project configuration using PEP 517/518/621
# This file configures project metadata, dependencies, and development tools

[build-system]
requires = ["hatchling>=1.21.0", "hatch-vcs>=0.4.0"]
build-backend = "hatchling.build"

# Project Metadata
# ----------------
[project]
name = "velvet-python"
version = "0.1.0"
description = "Building Python mastery through working code - a comprehensive learning journey"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Cazzy Aporbo", email = ""},
]
maintainers = [
    {name = "Cazzy Aporbo", email = ""},
]
keywords = [
    "python",
    "education",
    "learning",
    "benchmarks",
    "patterns",
    "concurrency",
    "performance",
    "best-practices",
    "tutorial",
    "interactive",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Education",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.10"

# Core runtime dependencies
# These are minimal - each module has its own requirements.txt
dependencies = [
    "rich>=13.7.0",
    "typer>=0.9.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
# Development dependencies (mirrors requirements-dev.txt)
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.1.0",
    "isort>=5.13.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocs-mermaid2-plugin>=1.1.1",
    "pymdown-extensions>=10.7",
]

# All optional dependencies
all = [
    "velvet-python[dev]",
    "velvet-python[docs]",
]

[project.urls]
Homepage = "https://github.com/Cazzy-Aporbo/velvet-python"
Documentation = "https://github.com/Cazzy-Aporbo/velvet-python#readme"
Repository = "https://github.com/Cazzy-Aporbo/velvet-python.git"
Issues = "https://github.com/Cazzy-Aporbo/velvet-python/issues"
Discussions = "https://github.com/Cazzy-Aporbo/velvet-python/discussions"
Changelog = "https://github.com/Cazzy-Aporbo/velvet-python/blob/main/CHANGELOG.md"

[project.scripts]
velvet = "velvet_python.cli:main"

# Hatch Configuration
# -------------------
[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
include = [
    "velvet_python/**/*.py",
    "*/src/**/*.py",
    "*/examples/**/*.py",
    "*/benchmarks/**/*.py",
    "*/tests/**/*.py",
    "*/app.py",
    "*/requirements.txt",
    "*/README.md",
]
exclude = [
    "*.pyc",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "*.egg-info",
    "dist",
    "build",
    ".git",
    ".venv",
    "venv",
]

[tool.hatch.build.targets.wheel]
packages = ["velvet_python"]

# Black Configuration
# -------------------
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort Configuration
# -------------------
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_glob = ["*/migrations/*", "*/venv/*", "*/.venv/*"]
known_first_party = ["velvet_python"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Ruff Configuration
# ------------------
[tool.ruff]
target-version = "py310"
line-length = 88
fix = true
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
    "PTH",  # flake8-use-pathlib
    "N",    # pep8-naming
    "COM",  # flake8-commas
    "Q",    # flake8-quotes
    "TID",  # flake8-tidy-imports
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "PIE",  # flake8-pie
    "ISC",  # flake8-implicit-str-concat
    "PGH",  # pygrep-hooks
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "LOG",  # flake8-logging
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "W191",   # indentation contains tabs
    "TRY003", # Avoid specifying long messages outside exception class
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["S101", "ARG", "FBT", "PLR2004", "S"]
"benchmarks/*" = ["S101", "T201"]
"examples/*" = ["T201", "T203"]

# MyPy Configuration
# ------------------
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "benchmarks.*"
disallow_untyped_defs = false

# Pytest Configuration
# --------------------
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests", "*/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=velvet_python",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--tb=short",
    "--dist=auto",
    "-vv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
    "requires_net: marks tests as requiring network",
    "asyncio: marks tests as async",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage Configuration
# ----------------------
[tool.coverage.run]
source = ["velvet_python", "*/src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/conftest.py",
    "*/benchmarks/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "# nocov",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
title = "Velvet Python Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit Security Configuration
# -----------------------------
[tool.bandit]
targets = ["velvet_python", "*/src"]
exclude_dirs = ["tests", "*/tests", "benchmarks", "examples"]
skips = ["B101", "B601", "B602", "B603"]
severity = "medium"
confidence = "medium"

# Interrogate Docstring Coverage
# ------------------------------
[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests", "benchmarks"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 1
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

# Commitizen Configuration
# ------------------------
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "velvet_python/__init__.py:__version__",
]
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"
style = [
    ["qmark", "fg:#E6E6FA bold"],
    ["question", "fg:#FFE4E1 bold"],
    ["answer", "fg:#F0E6FF bold"],
    ["pointer", "fg:#FFF0F5 bold"],
    ["highlighted", "fg:#FFEFD5 bold"],
    ["selected", "fg:#F5DEB3 bold"],
    ["separator", "fg:#DDA0DD"],
    ["instruction", "fg:#8B7D8B"],
    ["text", "fg:#706B70"],
    ["disabled", "fg:#858585 italic"],
]

# Pydocstyle Configuration
# ------------------------
[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D107", "D212", "D401"]
match = '(?!test_).*\.py'
match-dir = '(?!tests|benchmarks|examples|migrations).*'

# Vulture Dead Code Detection
# ---------------------------
[tool.vulture]
min_confidence = 80
paths = ["velvet_python", "*/src"]
exclude = ["tests", "benchmarks", "examples"]
ignore_decorators = ["@app.route", "@require_*", "@pytest.fixture"]
ignore_names = ["test_*", "Test*", "_*"]
make_whitelist = false
sort_by_size = true
